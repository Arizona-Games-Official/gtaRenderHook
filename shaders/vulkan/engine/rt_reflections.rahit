#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

layout(location = 0) rayPayloadInNV PrimRaysPayload prd;
hitAttributeNV vec3 attribs;

layout(binding = 3, set = 0) uniform sampler baseSampler;

layout(binding = 0, set = 2, scalar) buffer ScnDesc{ sceneDesc i[]; } scnDesc;
layout(binding = 1, set = 2, scalar) buffer Vertices { Vertex v[]; } vertices[];
layout(binding = 2, set = 2) buffer Indices { uint16_t i[]; } indices[];
layout(binding = 3, set = 2) uniform texture2D textures[];
layout(binding = 4, set = 2, scalar) buffer MatDesc{ MaterialDesc i[]; } matDesc;

void main()
{
    int obj_id = scnDesc.i[gl_InstanceID].objId;
    // Indices of the triangle
    ivec3 ind = ivec3(indices[obj_id].i[3 * gl_PrimitiveID + 0], //
    indices[obj_id].i[3 * gl_PrimitiveID + 1], //
    indices[obj_id].i[3 * gl_PrimitiveID + 2]);//
    // Vertex of the triangle
    Vertex v0 = vertices[obj_id].v[ind.x];
    Vertex v1 = vertices[obj_id].v[ind.y];
    Vertex v2 = vertices[obj_id].v[ind.z];

    const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);

    // Computing the normal at hit position
    vec3 normal = v0.normals.xyz * barycentrics.x + v1.normals.xyz * barycentrics.y + v2.normals.xyz * barycentrics.z;

    // Transforming the normal to world space
    normal = normalize(vec3(scnDesc.i[gl_InstanceID].transfoIT * vec4(normal, 0.0)));
    vec4 color = unpackUnorm4x8(v0.color) * barycentrics.x + unpackUnorm4x8(v1.color)  * barycentrics.y + unpackUnorm4x8(v2.color) * barycentrics.z;
    vec3 up = vec3(0, 0, 1);

    MaterialDesc material = matDesc.i[scnDesc.i[gl_InstanceID].txtOffset + v0.material];

    vec2 tc = v0.uv.xy * barycentrics.x + v1.uv.xy * barycentrics.y + v2.uv.xy * barycentrics.z;

    if (material.txd_id >= 0) {
        vec4 tex_color =texture(sampler2D(textures[material.txd_id], baseSampler), tc);
        if (tex_color.a < 0.5)
        ignoreIntersectionNV();
    }
    else if (unpackUnorm4x8(material.color).a  < 0.5)
        ignoreIntersectionNV();
}
