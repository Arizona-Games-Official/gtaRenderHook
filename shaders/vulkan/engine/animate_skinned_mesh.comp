#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

struct Vertex
{
    vec4 pos;
    vec4 uv;
    vec4 normals;
    vec4 local_motion;
    vec4 weights;
    uint indices;
    uint color;
    uint material;
    uint padd;
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, scalar) buffer VerticesIn
{
    Vertex v[];
}
vertices_in;

layout(binding = 1, scalar) buffer VerticesOut
{
    Vertex v[];
}
vertices_out;

layout(binding = 2, scalar) buffer Matrices
{
    mat4x3 m[];
}
bone_transforms;

layout(binding = 3, scalar) buffer MatricesPrev
{
    mat4x3 m_prev[];
}
bone_transforms_prev;

void main()
{
    Vertex v0 = vertices_in.v[gl_GlobalInvocationID.x];
    uvec4 bone_indices = uvec4((v0.indices) & 0xFFu,
    (v0.indices >> 8) & 0xFFu,
    (v0.indices >> 16) & 0xFFu,
    (v0.indices >> 24) & 0xFFu);

    mat4x3 bone_to_local = bone_transforms.m[bone_indices.x] * v0.weights.x + bone_transforms.m[bone_indices.y] * v0.weights.y +
    bone_transforms.m[bone_indices.z] * v0.weights.z + bone_transforms.m[bone_indices.w] * v0.weights.w;
    mat4x3 bone_to_local_prev = bone_transforms_prev.m_prev[bone_indices.x] * v0.weights.x + bone_transforms_prev.m_prev[bone_indices.y] * v0.weights.y +
    bone_transforms_prev.m_prev[bone_indices.z] * v0.weights.z + bone_transforms_prev.m_prev[bone_indices.w] * v0.weights.w;
    vec3 new_pos = bone_to_local * vec4(v0.pos.xyz, 1.0);
    vec3 old_pos = bone_to_local_prev * vec4(v0.pos.xyz, 1.0);

    v0.pos.xyz = new_pos;
    v0.local_motion.xyz = new_pos - old_pos;
    v0.normals.xyz = bone_to_local * vec4(v0.normals.xyz, 0.0);
    vertices_out.v[gl_GlobalInvocationID.x] = v0;
}