#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rg16f) uniform image2D result;
layout(binding = 2, set = 0, rgba16f) uniform image2D normals;
layout(binding = 3, set = 0) uniform sampler baseSampler;
layout(binding = 4, set = 0) uniform texture2D randomNoise;
layout(binding = 5, set = 0, rg16f) uniform image2D motionVectors;
layout(binding = 6, set = 0) uniform AOParams
{
    float min_distance;
    float max_distance;
    float max_draw_dist;
    uint time_stamp;
} ao_params;

layout(binding = 0, set = 1) uniform CameraProperties
{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
    mat4 viewProj;
    mat4 viewProjPrev;
} cam;

uint SmallestPowerOf2GreaterThan(in uint x)
{
    // Set all the bits behind the most significant non-zero bit in x to 1.
    // Essentially giving us the largest value that is smaller than the
    // next power of 2 we're looking for.
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;

    // Return the next power of two value.
    return x + 1;
}

float FloatPrecision(in float x, in uint NumMantissaBits)
{
    // Find the exponent range the value is in.
    uint nextPowerOfTwo = SmallestPowerOf2GreaterThan(uint(x));
    float exponentRange = nextPowerOfTwo - (nextPowerOfTwo >> 1);

    float MaxMantissaValue = 1 << NumMantissaBits;

    return exponentRange / MaxMantissaValue;
}

layout(location = 0) rayPayloadEXT ShadowHitPayload payload;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsNoneEXT;

    vec4 normals_d =  imageLoad(normals, ivec2(gl_LaunchIDEXT.xy));

    if (normals_d.w > ao_params.max_draw_dist)
    imageStore(result, ivec2(gl_LaunchIDEXT.xy), vec4(1, 0, 0, 0));

    vec3 jitter = texture(sampler2D(randomNoise, baseSampler), vec2((gl_LaunchIDEXT.xy)%64)/64.0f).xyz * 2.0f - 1.0f.xxx;
    float ao_accum = 0.0f;
    const int sample_count = 2;

    // Calculate coordinate system for the hemisphere.
    vec3 u, v, w;
    w = normals_d.xyz;

    // Get a vector that's not parallel to w.
    vec3 right = 0.3f * w + vec3(-0.72f, 0.56f, -0.34f);
    v = normalize(cross(w, right));
    u = cross(v, w);
    const float c_goldenRatioConjugate = 0.61803398875;

    vec3 random_s_dir = texture(sampler2D(randomNoise, baseSampler), vec2((gl_LaunchIDEXT.xy)%64+ jitter.xy * (ao_params.time_stamp%64))/64.0f).xyz;

    const float depth_eps = FloatPrecision(normals_d.w, 10);
    float velocity = 0;
    for (int i =0; i< sample_count; i++)
    {
        payload.hitDistance = 0.0f;
        payload.velocity = 0.0f;
        payload.x = 0.0f;
        payload.y = 0.0f;

        vec3 random_dir=fract(random_s_dir + vec3((ao_params.time_stamp+i)%4096) * c_goldenRatioConjugate);
        random_dir.xy = random_dir.xy * 2.0f - 1.0f.xx;
        traceRayEXT(topLevelAS, rayFlags,
        0xFF, // cullMask
        0, // sbtRecordOffset
        0, // sbtRecordStride
        0, // missIndex
        origin.xyz + direction.xyz * normals_d.w + depth_eps * w, // ray origin
        ao_params.min_distance, // ray min range
        normalize(u*random_dir.x + v*random_dir.y + w*random_dir.z), // ray direction
        ao_params.max_distance, // ray max range
        0// payload (location = 0)
        );
        ao_accum += (payload.hitDistance > 0 ? 1.0f: 0.0f);
        velocity += payload.velocity;
    }
    ao_accum /= float(sample_count);
    velocity /= float(sample_count);

    vec2 res = normals_d.w < 5000 ? vec2(ao_accum, velocity) : vec2(0.0f, 0.0f);
    imageStore(result, ivec2(gl_LaunchIDEXT.xy), res.xyyy);
}
