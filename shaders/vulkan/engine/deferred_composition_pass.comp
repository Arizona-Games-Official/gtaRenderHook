#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba16f) uniform image2D tx_albedo;
layout(binding = 1, set = 0, rgba16f) uniform image2D tx_normal_depth;
layout(binding = 2, set = 0, r16f) uniform image2D tx_ao;
layout(binding = 3, set = 0, rgba16f) uniform image2D tx_lighting;
layout(binding = 4, set = 0, rgba16f) uniform image2D tx_refl;
layout(binding = 5, set = 0, rgba16f) uniform image2D tx_material_params;
layout(binding = 6, set = 0, rgba16f) uniform image2D output_image;
layout(binding = 7, set = 0) uniform SkyCfg
{
    vec4 sunDir;
    vec4 sunColor;
    vec4 horizonColor;
    vec4 skyColor;
    vec4 ambientColor;
}sky_cfg;
layout(binding = 0, set = 1) uniform CameraProperties
{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
    mat4 viewProjInverse;
    mat4 viewProjInversePrev;
} cam;

vec3 LinDepthToViewPos(float  lin_z, vec2 tc)
{
    vec2 d = tc * 2.0 - 1.0;
    vec4 v_target    = cam.projInverse* vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(v_target.xyz), 0);
    return normalize(v_target.xyz);
}

vec3 LinDepthToViewDir(float  lin_z, vec2 tc)
{
    vec2 d = tc * 2.0 - 1.0;
    vec4 v_target    = cam.projInverse* vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(v_target.xyz), 0);

    return direction.xyz;
}
float pow5(float v) {
    return v*v*v*v*v;
}

float MicrofacetFresnel(in vec3 LightDir, in vec3 Normal, in float fRoughness) {
    float IOR = 1.1f;
    float f0 = (1 - IOR) / (1 + IOR);
    f0 *= f0;
    // Cosine between light and normal
    float CosPhi = max(dot(LightDir, Normal), 0);

    return f0 + (1 - f0) * pow5(1 - CosPhi);
}

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec4 OutLighting;
    const vec3 ViewPos = cam.viewInverse[3].xyz;

    vec4 AlbedoColor = imageLoad(tx_albedo, pos);
    //float4 Parameters = txGB2.Sample(samLinear, i.vTexCoord.xy);

    vec3 Normals;
    float ViewZ;
    //GetNormalsAndDepth(txGB1, samLinear, i.vTexCoord.xy, ViewZ, Normals);
    vec4 normals_depth = imageLoad(tx_normal_depth, pos);
    Normals = normalize(normals_depth.xyz);

    ivec2 tex_res = imageSize(tx_normal_depth);

    vec3 ViewDir = LinDepthToViewDir(normals_depth.w, vec2(pos.xy)/vec2(tex_res.xy));
    vec3 WorldPos = ViewPos + ViewDir * normals_depth.w;
    //uint MaterialType = ConvertToMatType(Parameters.w);

    // float Metallness = Parameters.x;

    vec4 Lighting = imageLoad(tx_lighting, pos);//txLighting.Sample(samLinear, i.vTexCoord.xy);

    if (normals_depth.w >= 5000)
    {
        OutLighting.xyz = AlbedoColor.xyz;
        OutLighting.a = 1;
    }
    else
    {
        vec3 vSkyLightCol = sky_cfg.ambientColor.xyz;//vec3(90.0/255.0, 205.0/255.0, 255.0/255.0);
        float AmbientOcclusion = imageLoad(tx_ao, pos).r;
        // Diffuse term consists of diffuse lighting, and sky ambient
        vec3 DiffuseTerm = ((Lighting.rgb) + AmbientOcclusion * vSkyLightCol.rgb);
        // Specular term consists of specular highlights
        // vec3 SpecularTerm = (Lighting.w * Lighting.xyz) * AmbientOcclusion;
        // Reflection term is computed before deferred
        vec4 ref_params = imageLoad(tx_refl, pos);
        vec4 mat_params = imageLoad(tx_material_params, pos);

		float specular = mat_params.r;
		float roughness = mat_params.g;
		float metallness = mat_params.b;

		float k_s = MicrofacetFresnel(-ViewDir,Normals, roughness) * specular;

		vec3 specular_base = mix(vec3(specular)*.08, AlbedoColor.rgb, metallness);

		float r_cutoff = 0.65f;
		// ref_params.rgb = mix(ref_params.rgb, sky_cfg.skyColor.rgb, max( roughness - r_cutoff, 0.0f));
        vec3 ReflectionTerm = mix(specular_base, vec3(1), k_s) * ref_params.rgb;//txReflections.Sample(samLinear, i.vTexCoord.xy).rgb;


        // Add atmospheric scattering to result
        OutLighting.xyz = DiffuseTerm * AlbedoColor.rgb * (1 - metallness) * (1 - k_s)  + ReflectionTerm;//+ SpecularTerm * Parameters.x + ReflectionTerm * FresnelCoeff * Parameters.x;
        OutLighting.a = 1;
    }
    imageStore(output_image, pos, OutLighting);
}